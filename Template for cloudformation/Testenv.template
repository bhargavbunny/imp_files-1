{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "AWS CloudFormation Sample Template myBB_Multi_AZ: Create a highly available, scalable myBB installation",
    
    "Mappings": {
        "Region2VpcCidr": {
                            
            
            "us-east-1": {
                "PrivateSubnet1Cidr": "10.1.200.0/24",
                "PrivateSubnet2Cidr": "10.1.201.0/24",
                "PublicSubnet1Cidr": "10.1.100.0/24",
                "PublicSubnet2Cidr": "10.1.101.0/24",
                "VpcCidr": "10.1.0.0/16"
            }
            
        }
    },
   

    "Parameters": {
        
        "NetworkName": {
          "Description": "The name of the network that will be used to tag all resources in the VPC",
          "Type": "String",
          "Default": "BB-Subnet"
        },

      
     
  
        "VPCAvailabilityZone1": {
            "Default": "us-east-1a",
            "Description": "One of two Availability Zones that will be used to create subnets.",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "VPCAvailabilityZone2": {
            "Default": "us-east-1b",
            "Description": "Two of two Availability Zones that will be used to create subnets. Must be different than VPCAvailabilityZone2.",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
		  "WebServerCapacity": {
            "ConstraintDescription": "must be between 2 and 2 EC2 instances.",
            "Default": "2",
            "Description": "The initial number of WebServer instances",
            "MaxValue": "4",
            "MinValue": "2",
            "Type": "Number"
        },
		"SSHLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        }
        
    },


    "Resources": {

        "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": {
              "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "VpcCidr"]
            },
            "Tags": [{
              "Key": "Network",
              "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
            }, {
              "Key": "Scheme",
              "Value": "PublicAndPrivate"
            },
            {
              "Key": "Name",
              "Value": "cybage_alm_bhargav_vpc"
            }]
          }
        },
"PublicSubnet1": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": {
              "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PublicSubnet1Cidr"]
            },
            "MapPublicIpOnLaunch" : true,
            "AvailabilityZone": {
              "Ref": "VPCAvailabilityZone1"
            },
            "Tags": [{
              "Key": "Network",
              "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
            }, {
              "Key": "Network",
              "Value": "Public"
            },
			{
              "Key": "Name",
              "Value": "cybage_alm_bhargav_publicsubnet"
            }]
          }
        },

        "PublicSubnet2": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "CidrBlock": {
              "Fn::FindInMap": ["Region2VpcCidr", { "Ref" : "AWS::Region" }, "PublicSubnet2Cidr"]
            },
            "MapPublicIpOnLaunch" : true,
            "AvailabilityZone": {
              "Ref": "VPCAvailabilityZone2"
            },
            "Tags": [{
              "Key": "Network",
              "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
            }, {
              "Key": "Network",
              "Value": "Public"
            },
			{
              "Key": "Name",
              "Value": "cybage_alm_bhargav_publicsubnet2"
            }]
          }
        },
"InternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
            "Tags": [{
              "Key": "Network",
              "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
            }, {
              "Key": "Network",
              "Value": "Public"
            },
			{
              "Key": "Name",
              "Value": "cybage_alm_bhargav_internetgateway"
            }]
          }
        },

        "GatewayToInternet": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },

        "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "Tags": [{
              "Key": "Network",
              "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
            }, {
              "Key": "Network",
              "Value": "Public"
            },
			{
              "Key": "Name",
              "Value": "cybage_alm_bhargav_publicroutetable"
            }]
          }
        },

        "PublicRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "GatewayToInternet",
          "Properties": {
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },

        "PublicSubnet1RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },

        "PublicSubnet2RouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnet2"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
		
		   "PublicNetworkAcl": {
          "Type": "AWS::EC2::NetworkAcl",
          "Properties": {
            "VpcId": {
              "Ref": "VPC"
            },
            "Tags": [{
              "Key": "Network",
              "Value": { "Fn::Join" : ["-", [{ "Ref": "NetworkName" }, { "Ref": "AWS::Region" }] ]}
            }, {
              "Key": "Network",
              "Value": "Public" 
            },
			{
              "Key": "Name",
              "Value": "cybage_alm_bhargav_NetworkAcl"
            }]
          }
        },
		 "InboundHTTPPublicNetworkAclEntry": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "100",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
              "From": "80",
              "To": "80"
            }
          }
        },

        "InboundHTTPSPublicNetworkAclEntry": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "101",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
              "From": "443",
              "To": "443"
            }
          }
        },

        "InboundSSHPublicNetworkAclEntry": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "102",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "false",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
              "From": "22",
              "To": "22"
            }
          }
        },


        "OutboundPublicNetworkAclEntry": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            },
            "RuleNumber": "100",
            "Protocol": "6",
            "RuleAction": "allow",
            "Egress": "true",
            "CidrBlock": "0.0.0.0/0",
            "PortRange": {
              "From": "0",
              "To": "65535"
            }
          }
        },

        "PublicSubnet1NetworkAclAssociation": {
          "Type": "AWS::EC2::SubnetNetworkAclAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnet1"
            },
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            }
          }
        },

        "PublicSubnet2NetworkAclAssociation": {
          "Type": "AWS::EC2::SubnetNetworkAclAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnet2"
            },
            "NetworkAclId": {
              "Ref": "PublicNetworkAcl"
            }
          }
        },
		
		 "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",          
            "Properties": {
                "ImageId": "ami-41e0b93b",
                "InstanceType": "t2.micro" ,
                "SecurityGroups": [{"Fn::GetAtt" : [ "WebServerSecurityGroup" , "GroupId" ]}],
				    "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["", [
                            "#!/bin/bash -xe\n",
                            "apt-get -y install curl\n",
							"apt-get -y install apache2\n"
						    "apt-get -y install maven\n",
							"apt-get -y install git\n",
							"cd root/ubuntu/Desktop\n",
							"mkdir bhargav\n",
							"cd bhargav\n",
							"git init \n",
							"git clone https://github.com/bhargavbunny/EMS-app.git"
                           
                        ]
                        ]
                    }
                     },
                "KeyName": "bhargav123"
        }
		},
		
		
		"ElasticLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": "true",
                "Subnets" : [ { "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" } ],
                "SecurityGroups": [{"Fn::GetAtt" : [ "WebServerSecurityGroup" , "GroupId" ]}],
                "Listeners": [{
                    "LoadBalancerPort": "80",
                    "InstancePort": "80",
                    "Protocol": "HTTP"
                }],
				        "HealthCheck" : {
          "Target" : Target: HTTP:80/,
          "HealthyThreshold" : "10",
          "UnhealthyThreshold" : "5",
          "Interval" : "20",
          "Timeout" : "10"
        }
				
            } 
		    
		},
        

         "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "2",
                "MaxSize": "3",
                "DesiredCapacity": {
                    "Ref": "WebServerCapacity"
                },
                "LoadBalancerNames": [{
                    "Ref": "ElasticLoadBalancer"
                }],
				
			 "Tags" : [ {
              "Key": "Name",
              "Value": "cybage_alm_bhargav_instance",
			  "PropagateAtLaunch" : "true"
            }  ]
            }
        },
		
		 "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 locked down to the ELB and SSH access",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp" : "0.0.0.0/0"
                }, 
                {
                    "IpProtocol": "tcp",
                    "FromPort": "22",
                    "ToPort": "22",
                    "CidrIp": {
                        "Ref": "SSHLocation"
                    }
                }]
            }
        },
		
		"WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "300",
        "ScalingAdjustment" : "100"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "600",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 40% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "5",
        "Threshold": "40",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU <20% for 60 min",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "30",
        "Threshold": "20",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    }
      
	  
	  }

		
    

}